const { Telegraf, session, Scenes, Composer, Markup } = require('telegraf');
require('dotenv').config();
const bot = new Telegraf(process.env.BOT_TOKEN); // token

bot.start(async (ctx) => {
    try {
      await ctx.reply(`${ctx.from.first_name} ` + "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏?", Markup.keyboard([
        [`–ó–∞–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É`,],
        ["–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—ã"]
      ]) .oneTime().resize())
} catch (e) {
    console.log(e)
}
});


const startWizard = new Composer() // new scene
startWizard.on('text', async (ctx) => {
    ctx.wizard.state.data = {};
    await ctx.reply(`${ctx.from.first_name} ` + '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É',Markup.keyboard([
        ['–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞', '–†–∞–∑–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–π'],
        ['–ü–µ—Ä–µ–µ–∑–¥', '–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ'],
        ['–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', '–°–æ–ª—è—Ä'],
        ['–ó–∞—Ç–º–µ–Ω–∏–µ']]))
    return ctx.wizard.next()
})

const jobs = new Composer()
    jobs.on('text', async (ctx) => {
    ctx.wizard.state.data.jobs = ctx.message.text;
    await ctx.reply(`${ctx.from.first_name} ` + '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è.')
    return ctx.wizard.next()
})

const firstName = new Composer()
    firstName.on('text', async (ctx) => {
    ctx.wizard.state.data.firstName = ctx.message.text;
    await ctx.reply(`${ctx.from.first_name} ` + '–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.')
    return ctx.wizard.next()
})


const birthDate = new Composer()
birthDate.on('text', async (ctx) => {
    ctx.wizard.state.data.birthDate = ctx.message.text;
    await ctx.replyWithHTML(`${ctx.from.first_name} ` + `–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –º–µ—Å—Ç–æ –∏ <i>—Ç–æ—á–Ω–æ–µ</i> –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "00:00".`) 
    return ctx.wizard.next()
});

const placeAndTime = new Composer()
    placeAndTime.on('text', async (ctx) => {
    ctx.wizard.state.data.placeAndTime = ctx.message.text;
    await ctx.reply(`${ctx.from.first_name} ` + '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.') 
    return ctx.wizard.next()
    });

const phoneNumber = new Composer()
    phoneNumber.on('text', async (ctx) => {
    ctx.wizard.state.data.phoneNumber = ctx.message.text;
    await ctx.reply(`${ctx.from.first_name} ` + '–í–≤–µ–¥–∏—Ç–µ –í–∞—à email.') 
    return ctx.wizard.next()
    });
   
    const CHAT_ID = 462881256;  ////373854503

    const email = new Composer()
    email.on('text', async (ctx) => {
    ctx.wizard.state.data.email = ctx.message.text;
    const wizardData = ctx.wizard.state.data;
    const response =`${ctx.from.first_name}\n${wizardData.jobs}\n${wizardData.firstName}\n${wizardData.birthDate}\n${wizardData.placeAndTime}\n${wizardData.phoneNumber}\n${wizardData.email}\n`
    await ctx.reply(`${ctx.from.first_name} ` + '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –æ—Ç–æ—Å–ª–∞–Ω—ã @dobrastro_ksenia. –Ø —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Å—å.\n –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –æ–ø—è—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
    await ctx.replyWithHTML(response);
    await ctx.sendMessage(response, {chat_id: CHAT_ID})
    return ctx.scene.leave()
    });
    
bot.hears('–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —Ä–∞–±–æ—Ç—ã', ctx =>
{
ctx.replyWithHTML(`${ctx.from.first_name} ` + '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –º–æ–π —Å–∞–π—Ç –∏ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–ª–µ–≤–∞ üëà.')
ctx.sendMessage(`${ctx.from.first_name} ` + "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤–∞—à —Å–∞–π—Ç", {chat_id: CHAT_ID})
});
  

const menuScene = new Scenes.WizardScene('sceneWizard', startWizard, jobs, firstName, birthDate, placeAndTime, phoneNumber, email)

const stage = new Scenes.Stage([menuScene])

bot.use(session())
bot.use(stage.middleware())

bot.hears('–ó–∞–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É', (ctx) => ctx.scene.enter('sceneWizard'));

bot.launch()
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
